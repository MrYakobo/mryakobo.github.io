/*var $,
    console,
    overlayClick,
    dialog;*/
function mixArrays(arr1, arr2) {
    "use strict";
    //If one array is empty, return the other array (may be empty as well)
    if (arr1.length === 0 || arr2.length === 0) {
        return arr1.length === 0 ? arr2.capitalizeElements() : arr1.capitalizeElements();
    }
    var retVal = [];
    arr1.forEach(function (a) {
        arr2.forEach(function (b) {
            retVal.push((a + b).capitalize());
        });
    });
    return retVal;
}

var i = 0;
var words = [];

function wordList(name1, name2) {
    "use strict";
    var firstPart = [],
        secondPart = [],
        reg,
        res1,
        res2,
        retVal;
    name1 = name1.toLowerCase();
    name2 = name2.toLowerCase();
    for (i = 0; i < words.length; i += 1) {
        //Searches the list for words that exists in name1 and/or name2
        //"blindskrift" matches "lind" in "lindskog"
        //The matched word (in words[]) has to match the whole word into a bit of the name.
        /*
        words[i] = Lind
        name1 = Lindskog
        name2 = Smedberg
        */
        reg = new RegExp(words[i].replace("\r", "").toLowerCase());
        res1 = reg.exec(name1);
        res2 = reg.exec(name2);
        if (res1 !== null && res1[0].length > 3) {
            firstPart.push(reg.exec(name1));
        }
        if (res2 !== null && res2[0].length > 3) {
            secondPart.push(reg.exec(name2));
        }
    }
    retVal = mixArrays(firstPart, secondPart);
    return retVal !== null ? retVal : [];
}
var oldCheck = false;
var oldN = "";
var oldM = "";
//Name generates the names (based on vowels)
function gen() {
    "use strict";
    $("body").css("cursor", "progress");
    var n = document.getElementById("name1").value,
        m = document.getElementById("name2").value,
        checked = document.getElementById("wordlist").checked,
        finalNames = [],
        time,
        reg;
    //If not the same input as before
    if (oldN !== n || oldM !== m || oldCheck !== checked) {
        oldN = n;
        oldM = m;
        oldCheck = checked;
        /*
        The final name is generated by taking what's before the first vowel in n plus what's after the first vowel in m.
        */
        time = Date.now();
        if (checked) {
            //Adds wordlist-names to the final names
            finalNames = wordList(n, m);
        }
        console.log(finalNames);
        //        finalNames.push(name(n, m));
        //        finalNames.push(name(m, n));
        finalNames = finalNames.concat(name(n, m));
        finalNames = finalNames.concat(name(m, n));
        //Result
        reg = new RegExp(",?undefined,?");
        console.log(finalNames);
        document.getElementById("result").innerHTML = finalNames.toTable();
        console.info("Executed in " + (Date.now() - time) + " ms.");
    }
    dialog("result");
    $("body").css("cursor", "");
}

function keydown(e) {
    "use strict";
    if (e.keyCode === 13) {
        gen();
    } else {
        overlayClick("result");
    }
}
Array.prototype.random = function () {
    "use strict";
    return (this[Math.floor(Math.random() * this.length)]);
};
var names = ["Abrahamsson", "Adamsson", "Ahlberg", "Andersson", "Johansson", "Karlsson", "Nilsson", "Eriksson", "Lindström", "Lindskog", "Lindqvist", "Wikström", "Söderberg"];
$("#name1").val(names.random());
$("#name2").val(names.random());
var vowels = ["a", "o", "u", "å", "e", "i", "y", "ä", "ö"];
//Formatting
//Array.prototype.toString = function () {
//var a = "";
//for (var i = 0; i < this.length - 1; i++) {
//    if (this[i] !== "undefined") a += this[i] + ", ";
//}
//a += this[this.length - 1];
//return a;
//}
Array.prototype.toTable = function () {
    "use strict";
    var a = "<table>";
    for (i = 0; i < this.length - 1; i += 1) {
        if (this[i] !== "undefined") {
            a += "<tr><td>" + this[i] + "</td></tr>";
        }
    }
    a += "<tr><td>" + this[this.length - 1] + "</td></tr></table>";
    return a;
};

function name(name1, name2) {
    "use strict";
    var retVal = [],
        newName;
    for (i = 0; i < vowels.length; i += 1) {
        if (name1.indexOf(vowels[i]) > -1 || name2.indexOf(vowels[i]) > -1) {
            newName = name1.substring(0, name1.indexOf(vowels[i]) + 1) + name2.substring(name2.indexOf(vowels[i]) - 1);
            newName = newName.capitalize();
            //If the generated name is not the same as name1/name2
            if (newName !== name1 && newName !== name2) {
                retVal.push(newName);
            }
        }
    }
    return retVal;
}

function loadWords() {
    "use strict";
    //var root = "http://" + location.hostname + location.pathname;
    $.get("swe.json", function (data) {
        //        words = data.split("\n");
        //        words = JSON.parse(data);
        words = data;
        console.log("Loaded words");
    });
}
Array.prototype.capitalizeElements = function () {
    "use strict";
    for (i = 0; i < this.length; i += 1) {
        this[i] = this[i].toString().capitalize();
    }
};
loadWords();
String.prototype.capitalize = function () {
    "use strict";
    return this.charAt(0).toUpperCase() + this.slice(1).toLowerCase();
};